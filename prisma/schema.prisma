// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  password      String
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts      Account[]
  sessions      Session[]
  subscription  Subscription?
  userBots      UserBot[]
  chatMessages  ChatMessage[]
  transactions  Transaction[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Subscription {
  id                String            @id @default(cuid())
  userId            String            @unique
  stripeCustomerId  String            @unique
  stripeSubscriptionId String?        @unique
  stripePriceId     String?
  status            SubscriptionStatus @default(INACTIVE)
  currentPeriodStart DateTime?
  currentPeriodEnd   DateTime?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

model TradingBot {
  id          String    @id @default(cuid())
  name        String
  description String?
  strategy    String
  isActive    Boolean   @default(true)
  performance Float     @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  userBots     UserBot[]
  transactions Transaction[]

  @@map("trading_bots")
}

model UserBot {
  id        String   @id @default(cuid())
  userId    String
  botId     String
  isActive  Boolean  @default(true)
  startedAt DateTime @default(now())
  stoppedAt DateTime?

  user User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  bot  TradingBot @relation(fields: [botId], references: [id], onDelete: Cascade)

  @@unique([userId, botId])
  @@map("user_bots")
}

model Transaction {
  id        String          @id @default(cuid())
  userId    String
  botId     String
  type      TransactionType
  symbol    String
  amount    Float
  price     Float
  profit    Float?
  timestamp DateTime        @default(now())

  user User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  bot  TradingBot @relation(fields: [botId], references: [id], onDelete: Cascade)

  @@map("transactions")
}

model ChatMessage {
  id        String   @id @default(cuid())
  userId    String
  message   String
  response  String?
  timestamp DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("chat_messages")
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
  PAST_DUE
  CANCELED
  UNPAID
}

enum TransactionType {
  BUY
  SELL
}
